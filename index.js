// eslint-disable-next-line no-restricted-imports
import { Graph } from './graph.js';
// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ await
async function getDataAsync(url) {
    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    const response = await fetch(url, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
        redirect: 'follow',
    });

    // –ü—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ (–º—ã –æ—Ñ—Ñ–ª–∞–π–Ω) –∏–∑ `fetch` –≤—ã–ª–µ—Ç–∏—Ç —ç–∫—Å—Ü–µ–ø—à–Ω.
    // –¢—É—Ç –º—ã –¥–∞—ë–º –µ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã–ª–µ—Ç–µ—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∞–ª—å—à–µ –Ω–∞–≤–µ—Ä—Ö.
    // –ï—Å–ª–∏ –∂–µ –µ–≥–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ø—Ä–∏–¥—ë—Ç—Å—è –æ–±–µ—Ä–Ω—É—Ç—å –≤ `try` –∏ —Å–∞–º `fetch`:
    //
    // try {
    //     response = await fetch(url, {...});
    // } catch (error) {
    //     // –ß—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ–º
    //     throw error;
    // }

    // –ï—Å–ª–∏ –º—ã —Ç—É—Ç, –∑–Ω–∞—á–∏—Ç, –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è.
    // –ù–æ —Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å 404, 500, –∏ —Ç.–¥., –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç.
    if (response.ok) {
        return response.json();
    }

    // –ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è
    // –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞). –ú–æ–∂–Ω–æ –≤—ã–∫–∏–Ω—É—Ç—å –∏ —Å–∞–º `response`, —Å–º–æ—Ç—Ä—è
    // –∫–∞–∫–æ–π —É –≤–∞—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –ì–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤ –≤–µ—Ç–∫—É `catch`.
    const error = {
        status: response.status,
        customError: 'wtfAsync',
    };
    throw error;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–º–∏—Å—ã (—Ç–æ –∂–µ —Å–∞–º–æ–µ —á—Ç–æ `getDataAsync`)
function getDataPromise(url) {
    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    return fetch(url, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
        redirect: 'follow',
    }).then(
        (response) => {
            // –ï—Å–ª–∏ –º—ã —Ç—É—Ç, –∑–Ω–∞—á–∏—Ç, –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è.
            // –ù–æ —Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å 404, 500, –∏ —Ç.–¥., –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç.
            if (response.ok) {
                return response.json();
            }
            // –ü—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–ª—è
            // –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞). –ú–æ–∂–Ω–æ –∑–∞—Ä–µ–¥–∂–µ–∫—Ç–∏—Ç—å –∏ —Å–∞–º `response`, —Å–º–æ—Ç—Ä—è
            // –∫–∞–∫–æ–π —É –≤–∞—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –ì–ª–∞–≤–Ω–æ–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤ –≤–µ—Ç–∫—É `catch`.
            return Promise.reject({
                status: response.status,
                customError: 'wtfPromise',
            });
        },

        // –ü—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ (–º—ã –æ—Ñ—Ñ–ª–∞–π–Ω) –∏–∑ fetch –≤—ã–ª–µ—Ç–∏—Ç —ç–∫—Å—Ü–µ–ø—à–Ω,
        // –∏ –º—ã –ø–æ–ø–∞–¥—ë–º –≤ `onRejected` –∏–ª–∏ –≤ `.catch()` –Ω–∞ –ø—Ä–æ–º–∏—Å–µ.
        // –ï—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å `onRejected` –∏–ª–∏ `catch`, –ø—Ä–∏ –æ—à–∏–±–∫–µ –±—É–¥–µ—Ç
        // —ç–∫—Å—Ü–µ–ø—à–Ω `Uncaught (in promise)`.
        (error) => {
            // –ï—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É—Ç—å `Promise.reject()`, –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞
            // –ø—Ä–æ–º–∏—Å –±—É–¥–µ—Ç –∑–∞—Ä–µ–∑–æ–ª–≤–ª–µ–Ω —Å `undefined`, –∏ –º—ã –Ω–µ –ø–æ–ø–∞–¥—ë–º
            // –≤ –≤–µ—Ç–∫—É `catch` –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ
            // –ø–æ–ª—É—á–∏–º –¥—Ä—É–≥–æ–π —ç–∫—Å—Ü–µ–ø—à–Ω, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–∞—Å `undefined`
            // –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω—ã—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º.
            return Promise.reject(error);
        }
    );
}

// –î–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å await –∏–ª–∏ promise, –∫–∞–∫–∞—è –Ω—Ä–∞–≤–∏—Ç—Å—è
const getData = getDataAsync || getDataPromise;

async function loadCountriesData() {
    let countries = [];
    try {
        // –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–ö–ò ‚Ññ1: –ª–æ–º–∞–µ–º —ç—Ç–æ—Ç —É—Ä–ª, –∑–∞–º–µ–Ω—è—è all –Ω–∞ allolo,
        // –ø–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É.
        countries = await getData('https://restcountries.com/v3.1/all?fields=name&fields=cca3&fields=borders');
    } catch (error) {
        // console.log('catch for getData');
        // console.error(error);
        throw error;
    }
    return countries.reduce((result, country) => {
        result[country.cca3] = country;
        if (country.borders == null) {
            country.borders = [];
        }

        return result;
    }, {});
}

function findPath(countriesGraph, fromCountry, toCountry) {
    const graph = new Graph(countriesGraph);
    return graph.findShortestPath(fromCountry, toCountry);
}

function createCountriesGraph(countriesData) {
    const map = {};
    Object.entries(countriesData).forEach((keyVal) => {
        const borders = {};
        keyVal[1].borders.forEach((border) => {
            borders[border] = 1;
        });
        map[keyVal[0]] = borders;
    });
    return map;
}

function mapCountryNamesToCountryCode(countriesData) {
    const nameToCode = {};
    Object.entries(countriesData).forEach((keyVal) => {
        nameToCode[keyVal[1].name.common] = keyVal[0];
    });

    return nameToCode;
}

const form = document.getElementById('form');
const fromCountry = document.getElementById('fromCountry');
const toCountry = document.getElementById('toCountry');
const countriesList = document.getElementById('countriesList');
const submit = document.getElementById('submit');
const output = document.getElementById('output');

(async () => {
    fromCountry.disabled = true;
    toCountry.disabled = true;
    submit.disabled = true;

    output.textContent = 'Loading‚Ä¶';
    let countriesData = {};
    let countriesGraph = {};
    let nameToCode = {};

    try {
        // –ü–†–û–í–ï–†–ö–ê –û–®–ò–ë–ö–ò ‚Ññ2: –°—Ç–∞–≤–∏–º —Ç—É—Ç –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç –∏, –∫–æ–≥–¥–∞ –¥–æ–π–¥—ë—Ç
        // –¥–æ –Ω–µ–≥–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º. –ü–æ–ª—É—á–∞–µ–º —ç–∫—Å—Ü–µ–ø—à–Ω –∏–∑ `fetch`.
        countriesData = await loadCountriesData();
        nameToCode = mapCountryNamesToCountryCode(countriesData);
        countriesGraph = createCountriesGraph(countriesData);
    } catch (error) {
        // console.log('catch for loadCountriesData');
        // console.error(error);
        output.innerHTML = 'Something went wrong. Try to reset your compluter.';
        return;
    }
    output.innerHTML = '';

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –∏–Ω–ø—É—Ç–∞—Ö
    Object.keys(countriesData)
        .sort((a, b) => countriesData[b].area - countriesData[a].area)
        .forEach((code) => {
            const option = document.createElement('option');
            option.value = countriesData[code].name.common;
            option.label = code;
            countriesList.appendChild(option);
        });

    fromCountry.disabled = false;
    toCountry.disabled = false;
    submit.disabled = false;

    form.addEventListener('submit', (event) => {
        event.preventDefault();

        output.innerHTML = '–ò–¥–µ—Ç —Ä–∞—Å—Å—á–µ—Ç...';
        const path = findPath(countriesGraph, nameToCode[fromCountry.value], nameToCode[toCountry.value]);
        if (path == null) {
            output.innerHTML = '–ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
            return;
        }

        const pathAsString = path
            .map((countryCode) => {
                return countriesData[countryCode].name.common;
            })
            .join(' -> ');
        output.innerHTML = `${pathAsString}<br>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ 1 –∑–∞–ø—Ä–æ—Å ü§≠`;
        // TODO: –í—ã–≤–µ—Å—Ç–∏, –æ—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –µ–¥–µ–º, –∏ —á—Ç–æ –∏–¥—ë—Ç —Ä–∞—Å—á—ë—Ç.
        // TODO: –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –≤ –¥—Ä—É–≥—É—é –∑–∞ –º–∏–Ω–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤.
        // TODO: –í—ã–≤–µ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.
    });
})();
